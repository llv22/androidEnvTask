# Copyright 2022 DeepMind Technologies Limited.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# proto-file: android_env/proto/task.proto
# proto-message: android_env.Task

id: "droidfish_black_1"
name: "DroidFish - Black 1%"
description: "DroidFish is a feature-rich graphical chess user interface, combined with the very strong Stockfish chess engine."

setup_steps: [
  {
    adb_request: {
      install_apk: {
        filesystem: {
          path: "2020.02.11-droidfish-debug.apk"
        }
      }
    }
    success_condition: {
      check_install: {
        package_name: "org.petero.droidfish"
        timeout_sec: 10.0
      }
    }
  },
  {  # Put the device in portrait mode.
    adb_request: {
      settings: {
        name_space: SYSTEM
        put: { key: "user_rotation" value: "0" }
      }
    }
  }
]

reset_steps: [
  { adb_request: { force_stop: { package_name: "org.petero.droidfish" } } },
  { adb_request: { package_manager: { clear: { package_name: "org.petero.droidfish" } } } },
  {
    adb_request: {
      start_activity: {
        force_stop: true
        full_activity: "org.petero.droidfish/org.petero.droidfish.DroidFish"
        extra_args: [
            "--ez", '"RL_TASK_ENABLED"', '"true"',
            "--es", '"RL_TASK_GAME_CONFIG"', '"{\\"gameMode\\":2,\\"strength_percent\\":1}"'
        ]
      }
    }
    success_condition: {
      wait_for_app_screen: {
        app_screen: {
          activity: "org.petero.droidfish/org.petero.droidfish.DroidFish"
          view_hierarchy_path: [
          ]
        }
        timeout_sec: 10.0
      }
      num_retries: 10
    }
  },
  {
    adb_request: {
      start_screen_pinning: {
        full_activity: "org.petero.droidfish/org.petero.droidfish.DroidFish"
      }
    }
  }
]

expected_app_screen: {
  activity: "org.petero.droidfish/org.petero.droidfish.DroidFish"
  view_hierarchy_path: [
  ]
}

max_episode_sec: 7200  # Prevent infinite episodes.

log_parsing_config: {

  filters: ["AndroidRLTask:V"]

  log_regexps: {
    score: "^[Ss]core: ([-+]?[0-9]*\\.?[0-9]*)$"
    reward: "^[Rr]eward: ([-+]?[0-9]*\\.?[0-9]*)$"
    episode_end: "^episode[ _]end$"
    extra: "^extra: (?P<name>[^ ]*)[ ]?(?P<extra>.*)$"
    json_extra: "^json_extra: (?P<json_extra>.*)$"
  }
}

extras_spec: [
  # State of the board, representing pieces by these indices:
  # No piece - 0
  # White pieces - 1: king, 2: queen, 3: rook, 4: bishop, 5: knight, 6: pawn
  # Black pieces - 7: king, 8: queen, 9: rook, 10: bishop, 11: knight, 12: pawn
  # Returned when the board changes
  { name: "board" shape: [8, 8], dtype: INT32 },
  # Coordinate of selected piece (between 0-64, -1 if selection is removed)
  # Returned when a piece is selected (or unselected)
  { name: "selection" shape: [1], dtype: INT32 },
  # Coordinates "from" and "to" cells when a piece is moved (between 0-64)
  # Returned when a piece is moved
  { name: "moved" shape: [2], dtype: INT32 },
  # Coordinates "from" and "to" cells of an invalid move attempt (between 0-64)
  # Returned upon invalid move request
  { name: "invalid" shape: [2], dtype: INT32 }
]
